{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","style","background","height","width","cursor","onClick","yelMode","pinkMode","toggleMode","htmlFor","switchText","TextForm","useState","text","setText","color","heading","backgroundColor","value","onChange","event","target","rows","disabled","length","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","filter","element","Alert","alert","role","word","lower","charAt","slice","capitalized","msg","defaultProps","aboutText","App","setMode","setSwitchText","setAlert","cls","document","body","classList","remove","add","getElementById","addEventListener","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f912742a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">\r\n          {props.title}\r\n        </Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link\" aria-current=\"page\" to=\"/\">\r\n                Home\r\n              </Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          {/* d-flex is a class to align item in a horizontal line */}\r\n          <div className=\"d-flex\">\r\n            <div\r\n              className=\"yellow mx-2 rounded\"\r\n              style={{\r\n                background: \"yellow\",\r\n                height: \"30px\",\r\n                width: \"30px\",\r\n                cursor: \"pointer\",\r\n              }}\r\n              onClick={props.yelMode}\r\n              id=\"yelBtn\"\r\n            ></div>\r\n            <div\r\n              className=\"pinkMode mx-2 rounded\"\r\n              style={{ background: \"#ff00c1\", height: \"30px\", width: \"30px\" }}\r\n              onClick={props.pinkMode}\r\n              id=\"pinkBtn\"\r\n            ></div>\r\n            <div\r\n              className=\"bg-primary rounded mx-2\"\r\n              onClick={() => {\r\n                props.toggleMode(\"primary\");\r\n              }}\r\n              style={{ height: \"30px\", width: \"30px\", cursor: \"pointer\" }}\r\n            ></div>\r\n            <div\r\n              className=\"bg-danger rounded mx-2\"\r\n              onClick={() => {\r\n                props.toggleMode(\"danger\");\r\n              }}\r\n              style={{ height: \"30px\", width: \"30px\", cursor: \"pointer\" }}\r\n            ></div>\r\n            <div\r\n              className=\"bg-success rounded mx-2\"\r\n              onClick={() => {\r\n                props.toggleMode(\"success\");\r\n              }}\r\n              style={{ height: \"30px\", width: \"30px\", cursor: \"pointer\" }}\r\n            ></div>\r\n            <div\r\n              className=\"bg-warning rounded mx-2\"\r\n              onClick={() => {\r\n                props.toggleMode(\"warning\");\r\n              }}\r\n              style={{ height: \"30px\", width: \"30px\", cursor: \"pointer\" }}\r\n            ></div>\r\n          </div>\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              // the value is null here because we already write code for darkmode in toggle mode function, while other colors have to mentioned in the place of null\r\n              onClick={() => {\r\n                props.toggleMode(null);\r\n              }}\r\n              type=\"checkbox\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              {props.switchText}\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n  aboutText: PropTypes.string,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Enter Title Here\",\r\n  aboutText: \"About\",\r\n};\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    const handleUpClick = ()=>{//this is a function\r\n        let newText = text.toUpperCase();//function for Convert the text to Uppercase\r\n        setText(newText);//this will update the value\r\n        props.showAlert('The text is been converted to Uppercase', 'success')\r\n    }\r\n        const handleLoClick = ()=>{//this is a function\r\n        let newText = text.toLowerCase();//function for Convert the text to Lowercase\r\n        setText(newText);//this will update the value\r\n        props.showAlert('The text is been converted to Lowercase', 'success')\r\n    } \r\n           const handleClrClick = ()=>{//this is a function\r\n        let newText = '';//function for clearing text\r\n        setText(newText);//this will update the value\r\n        props.showAlert('The text is now Cleared', 'success')\r\n    } \r\n              const handleCopyClick = ()=>{//this is a function\r\n                // let text = document.getElementById('myBox');\r\n                // text.select();\r\n                navigator.clipboard.writeText(text);\r\n                // document.getSelection().removeAllRanges();\r\n                props.showAlert('The text is now Copied to Clipboard', 'success')\r\n    }\r\n    \r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);//this is for when we write something inside the box\r\n    }\r\n    // text = 'New Text';//this is the wrong way to change the state\r\n    // setText(\"New Text\");//this is the correct way to change the state\r\n    return (\r\n        <>\r\n            <div>\r\n                <div className=\"mb-3\">\r\n                <h1 className='mb-4' id='heading' style={{color: props.mode ==='dark'? '#a7b1d6': 'black'}}>{props.heading}</h1>\r\n                <textarea className=\"form-control\" style={{backgroundColor: props.mode ==='dark'? '#000629': 'white', color: props.mode ==='dark'? '#a7b1d6': 'black'}} value={text} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\r\n                {/* in the above line, we use \"State\" with the use of value */}\r\n                </div>\r\n                <button disabled={text.length===0} className=\"btn btn-info mx-1 my-1\" onClick={handleUpClick} >Convert To Uppercase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-info mx-1 my-1\" onClick={handleLoClick} >Convert To Lowercase</button>\r\n                <button disabled={text.length===0} className=\"btn btn-info mx-1 my-1\" onClick={handleClrClick} >Clear</button>\r\n                <button disabled={text.length===0} className=\"btn btn-info mx-1 my-1\" onClick={handleCopyClick} >Copy To Clipboard</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{color: props.mode ==='dark'? '#a7b1d6': 'black'}}>\r\n                <h2>Your Text Summary</h2>\r\n                <p>Your Text contains {text.split(/\\s+/).filter((element)=>{return element.length!==0}).length} Words and {text.length} Charecters</p>\r\n                <p>{0.008 * text.split(' ').filter((element)=>{return element.length!==0}).length} Minutes to Read</p>\r\n                {/* time taken to read one word multiply with number of words */}\r\n                <h2>Preview</h2>\r\n                <p>{text.length>0?text:\"Nothing To Preview\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalized = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        <div style = {{height:'50px'}}>\r\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalized(props.alert.type)}</strong>: {props.alert.msg}\r\n            </div>}\r\n            </div>\r\n    )\r\n}\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\")\n  const [switchText, setSwitchText] = useState(\"Enable Light Mode\")\n  const [alert, setAlert] = useState(null)//here alert is an object\n\n  const removeBodyClasses=()=>{\n    document.body.classList.remove('bg-light')\n    document.body.classList.remove('bg-dark')\n    document.body.classList.remove('bg-primary')\n    document.body.classList.remove('bg-success')\n    document.body.classList.remove('bg-warning')\n    document.body.classList.remove('bg-danger')\n  };\n\n  const toggleMode = (cls)=>{//this cls will recive onclick toggle mode command from navbar  \n    removeBodyClasses();\n    document.body.classList.add('bg-'+cls)\n    if (mode === 'light') {\n      setMode('dark')\n      setSwitchText('Enable Light Mode')\n      document.body.style.backgroundColor = '#000629';\n      // showAlert('Dark Mode has been Enabled', 'success') ;//calling the show alert function, with type and messages\n      // document.title= 'TextUtils - DarkMode'//changing the title dynamically\n    } \n    else {\n      setMode('light')\n      setSwitchText('Enable Dark Mode')\n      document.body.style.backgroundColor = 'white';\n      // showAlert('Light Mode has been Enabled', 'success');\n      // document.title= 'TextUtils - LightMode'//changing the title dynamicallyn\n    }\n  }\n  const showAlert=(message, type)=>{//show alert is a function which will help us to show alert messages\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n  const pinkMode=()=>{\n    const pinkBtn = document.getElementById('pinkBtn')\n    pinkBtn.addEventListener('click', function(){\n      document.body.style.backgroundColor = \"#fc0398\";\n      document.getElementById(\"heading\").style.color = \"#91577a\";\n      document.getElementById(\"myBox\").style.color = \"#91577a\";\n      document.getElementById(\"myBox\").style.backgroundColor = \"#fc0398\";\n    })\n  } \n   const yelMode=()=>{\n    const yelBtn = document.getElementById('yelBtn')\n    yelBtn.addEventListener('click', function(){\n      document.body.style.backgroundColor = 'yellow';\n      document.getElementById(\"heading\").style.color = \"grey\";\n      document.getElementById(\"myBox\").style.color = \"grey\";\n      document.getElementById(\"myBox\").style.backgroundColor = \"yellow\";\n    })\n  }\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar title = \"TextUtils\"  mode = {mode} toggleMode = {toggleMode} pinkMode={pinkMode}  yelMode={yelMode} switchText ={switchText}/>\n      <Alert alert = {alert}/>\n      {/* this alert inside the curly braces is a STATE, which we defined above */}\n      {/* in the above line:- when someone click on the switch located in nav bar, [onclick return toggle mode], here we define that toggle mode is equals to js function toggleMode, so we need to add a funcion */}\n      <div className=\"container my-3\">\n      {/* <Switch> */}\n            {/* <Route exact path=\"/About\">\n              <About mode={mode}/>\n            </Route> */}\n            {/* <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} heading = \"Try Text Utils - Word Counter | Charecter Counter\" mode = {mode}/>\n            {/* </Route> */}\n      {/* </Switch> */}\n      </div>\n    {/* </Router> */}\n  </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}